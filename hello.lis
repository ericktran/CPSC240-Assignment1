     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Hello Program".  This program demonstrates how to input and output a string with embedded white  *
     3                                  ;space.  Copyright (C) 2021  Erick Tran                                                                                 *
     4                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     5                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     6                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     7                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     8                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
     9                                  ;****************************************************************************************************************************
    10                                  
    11                                  ;Author information
    12                                  ;  Author name: Erick Tran
    13                                  ;  Author email: ericktran@csu.fullerton.edu
    14                                  ;
    15                                  ;Program information
    16                                  ;  Program name: Hello
    17                                  ;  Date program began 9-29-2021
    18                                  ;  Date program completed
    19                                  ;
    20                                  ;Purpose
    21                                  ;  This program will utilize basic I/O functions
    22                                  ;
    23                                  ;Project information
    24                                  ;  Files: welcome.cpp, hello.asm, run.sh
    25                                  ;  Status:
    26                                  ;
    27                                  ;Translator information
    28                                  ;  Gnu compiler: g++ -c -m64 -Wall -l welcome.lis -o welcome.o welcome.cpp
    29                                  ;
    30                                  ;Execution: ./welcome.out
    31                                  ;
    32                                  ;*****Code area*****
    33                                  
    34                                  extern printf
    35                                  extern scanf
    36                                  extern fgets
    37                                  extern stdin
    38                                  extern strlen
    39                                  global hello      ;makes hello_world callable by functions outside of file
    40                                  max_name_size equ 32
    41                                  three_point_five equ 0x400C000000000000
    42                                  
    43                                  
    44                                  segment .data
    45                                    ; Lay out prompts and responses for conversation
    46                                  
    47                                    align 16
    48 00000000 48656C6C6F20746865-       initial_message db "Hello there.", 0
    48 00000009 72652E00           
    49 0000000D 506C6561736520656E-       prompt_names_message db "Please enter your full name: ", 0
    49 00000016 74657220796F757220-
    49 0000001F 66756C6C206E616D65-
    49 00000028 3A2000             
    50 0000002B 506C6561736520656E-       prompt_title_message db "Please enter your title (Ms, Mr, Engineer, Programmer, Mathematician, Genius, etc): ", 0
    50 00000034 74657220796F757220-
    50 0000003D 7469746C6520284D73-
    50 00000046 2C204D722C20456E67-
    50 0000004F 696E6565722C205072-
    50 00000058 6F6772616D6D65722C-
    50 00000061 204D617468656D6174-
    50 0000006A 696369616E2C204765-
    50 00000073 6E6975732C20657463-
    50 0000007C 293A2000           
    51 00000080 48656C6C6F20257320-       hello_message db "Hello %s %s, what is your favorite color?", 0
    51 00000089 25732C207768617420-
    51 00000092 697320796F75722066-
    51 0000009B 61766F726974652063-
    51 000000A4 6F6C6F723F00       
    52 000000AA 257320697320612067-       color_response_message db "%s is a great color.", 10, 0
    52 000000B3 7265617420636F6C6F-
    52 000000BC 722E0A00           
    53 000000C0 497420776173206E69-       goodbye_message db "It was nice to meet you.", 10, 0
    53 000000C9 636520746F206D6565-
    53 000000D2 7420796F752E0A00   
    54                                  
    55 000000DA 257300                    stringformat db "%s", 0   ;%s means any string
    56                                  
    57                                  
    58                                  segment .bss
    59                                    ; Reserve memory sizes for user input
    60                                  
    61 00000000 <res 00000020>            name resb max_name_size
    62 00000020 <res 00000010>            title resb 16
    63 00000030 <res 00000010>            color resb 16
    64                                  
    65                                  segment .text
    66                                    ; Executable instructions in this segment
    67                                  
    68                                  hello:
    69                                    ; Entry point. Execution begins
    70                                  
    71                                    ; Prologue. Backup GPRs. 15 pushes
    72 00000000 55                        push rbp
    73 00000001 4889E5                    mov rbp, rsp
    74 00000004 53                        push rbx
    75 00000005 51                        push rcx
    76 00000006 52                        push rdx
    77 00000007 57                        push rdi
    78 00000008 56                        push rsi
    79 00000009 4150                      push r8
    80 0000000B 4151                      push r9
    81 0000000D 4152                      push r10
    82 0000000F 4153                      push r11
    83 00000011 4154                      push r12
    84 00000013 4155                      push r13
    85 00000015 4156                      push r14
    86 00000017 4157                      push r15
    87 00000019 9C                        pushf
    88                                  
    89                                    ; Show initial message
    90 0000001A 4831C0                    xor rax, rax              ; optimized version of zeroing out register (mov rax, 0)
    91 0000001D 48BF-                     mov rdi, stringformat
    91 0000001F [DA00000000000000] 
    92 00000027 48BE-                     mov rsi, initial_message
    92 00000029 [0000000000000000] 
    93 00000031 E8(00000000)              call printf
    94                                  
    95                                    ; Prompt for full name
    96 00000036 4831C0                    xor rax, rax
    97 00000039 48BF-                     mov rdi, stringformat
    97 0000003B [DA00000000000000] 
    98 00000043 48BE-                     mov rsi, prompt_names_message
    98 00000045 [0D00000000000000] 
    99 0000004D E8(00000000)              call printf
   100                                  
   101                                    ; Obtain user's name
   102 00000052 4831C0                    xor rax, rax
   103 00000055 48BF-                     mov rdi, name
   103 00000057 [0000000000000000] 
   104 0000005F BE20000000                mov rsi, max_name_size
   105 00000064 488B1425[00000000]        mov rdx, [stdin]
   106 0000006C E8(00000000)              call fgets
   107 00000071 4831C0                    xor rax, rax
   108 00000074 48BF-                     mov rdi, name
   108 00000076 [0000000000000000] 
   109 0000007E E8(00000000)              call strlen
   110 00000083 4989C6                    mov r14, rax
   111 00000086 4831C0                    xor rax, rax
   112 00000089 498986[FFFFFFFF]          mov [name + r14 - 1], rax
   113                                  
   114                                    ; Prompt for title
   115 00000090 4831C0                    xor rax, rax
   116 00000093 48BF-                     mov rdi, stringformat
   116 00000095 [DA00000000000000] 
   117 0000009D 48BE-                     mov rsi, prompt_title_message
   117 0000009F [2B00000000000000] 
   118 000000A7 E8(00000000)              call printf
   119                                  
   120                                    ; Obtain title
   121 000000AC 4831C0                    xor rax, rax
   122 000000AF 48BF-                     mov rdi, title
   122 000000B1 [2000000000000000] 
   123 000000B9 BE10000000                mov rsi, 16
   124 000000BE 488B1425[00000000]        mov rdx, [stdin]
   125 000000C6 E8(00000000)              call fgets
   126 000000CB 4831C0                    xor rax, rax
   127 000000CE 48BF-                     mov rdi, title
   127 000000D0 [2000000000000000] 
   128 000000D8 E8(00000000)              call strlen
   129 000000DD 4989C6                    mov r14, rax
   130 000000E0 4831C0                    xor rax, rax
   131 000000E3 498986[1F000000]          mov [title + r14 - 1], rax
   132                                  
   133                                  
   134                                    ; Greet user and prompt for color
   135 000000EA 4831C0                    xor rax, rax
   136 000000ED 48BF-                     mov rdi, hello_message
   136 000000EF [8000000000000000] 
   137 000000F7 48BE-                     mov rsi, title
   137 000000F9 [2000000000000000] 
   138 00000101 48BA-                     mov rdx, name
   138 00000103 [0000000000000000] 
   139 0000010B E8(00000000)              call printf
   140                                  
   141                                    ; Obtain color
   142 00000110 4831C0                    xor rax, rax
   143 00000113 48BF-                     mov rdi, color
   143 00000115 [3000000000000000] 
   144 0000011D BE10000000                mov rsi, 16
   145 00000122 488B1425[00000000]        mov rdx, [stdin]
   146 0000012A E8(00000000)              call fgets
   147 0000012F 4831C0                    xor rax, rax
   148 00000132 48BF-                     mov rdi, color
   148 00000134 [3000000000000000] 
   149 0000013C E8(00000000)              call strlen
   150 00000141 4989C6                    mov r14, rax
   151 00000144 4831C0                    xor rax, rax
   152 00000147 498986[2F000000]          mov [color + r14 - 1], rax
   153                                  
   154                                    ; Respond to color
   155 0000014E 4831C0                    xor rax, rax
   156 00000151 48BF-                     mov rdi, color_response_message
   156 00000153 [AA00000000000000] 
   157 0000015B 48BE-                     mov rsi, color
   157 0000015D [3000000000000000] 
   158 00000165 E8(00000000)              call printf
   159                                  
   160                                    ; Goodbye message
   161 0000016A 4831C0                    xor rax, rax
   162 0000016D 48BF-                     mov rdi, stringformat
   162 0000016F [DA00000000000000] 
   163 00000177 48BE-                     mov rsi, goodbye_message
   163 00000179 [C000000000000000] 
   164 00000181 E8(00000000)              call printf
   165                                  
   166                                    ;**Restore pointer to start of stack frame**
   167                                  
   168                                    ; Epilogue. Restore data to values held before this function was called
   169 00000186 9D                        popf
   170 00000187 415F                      pop r15
   171 00000189 415E                      pop r14
   172 0000018B 415D                      pop r13
   173 0000018D 415C                      pop r12
   174 0000018F 415B                      pop r11
   175 00000191 415A                      pop r10
   176 00000193 4159                      pop r9
   177 00000195 4158                      pop r8
   178 00000197 5E                        pop rsi
   179 00000198 5F                        pop rdi
   180 00000199 5A                        pop rdx
   181 0000019A 59                        pop rcx
   182 0000019B 5B                        pop rbx
   183 0000019C 5D                        pop rbp   ; Restore base pointer of stack frame of the caller
   184                                  
   185 0000019D C3                        ret
